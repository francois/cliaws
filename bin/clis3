#!/usr/bin/env ruby
#
#  Created on 2008-4-12.
#  Copyright (c) 2008. All rights reserved.

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require "main"

$:.unshift File.dirname(__FILE__) + "/../lib"
require "cliaws"

Main {
  mixin :s3_object do
    argument("s3_object") do
      required
      argument_required
    end
  end

  mode("url") do
    mixin :s3_object

    def run
      puts Cliaws.s3.url(params["s3_object"].value)

    rescue Cliaws::S3::UnknownBucket
      abort "Could not find bucket named #{$!.bucket_name}"
    end
  end

  mode("list") do
    mixin :s3_object

    def run
      puts Cliaws.s3.list(params["s3_object"].value)

    rescue Cliaws::S3::UnknownBucket
      abort "Could not find bucket named #{$!.bucket_name}"
    end
  end

  mode("touch") do
    mixin :s3_object

    def run
      Cliaws.s3.put("", params["s3_object"].value)

    rescue Cliaws::S3::UnknownBucket
      abort "Could not find bucket named #{$!.bucket_name}"
    end
  end

  mode("put") do
    argument("files_or_s3_path") do
      optional
      argument_required
      arity -2
    end

    option("data") do
      optional
      argument_required
    end

    def run
      paths = params["files_or_s3_path"].values
      s3_object = paths.pop

      if params["data"].given? && !paths.empty? then
        raise ArgumentError, "Cannot specify both --data and filename(s) to send."
      elsif params["data"].given? then
        source = params["data"].value
      elsif paths == ["-"] then
        source = STDIN
      else
        targets = paths.map {|filename| filename.to_s}
        case targets.length
        when 1
          File.open(targets.first, "rb") do |source|
            Cliaws.s3.put(source, s3_object)
          end
        else
          targets.each do |local_file|
            File.open(local_file, "rb") do |source|
              remote_file = File.join(s3_object, File.basename(local_file))
              puts "%-30s => %s" % [local_file, remote_file]
              Cliaws.s3.put(source, remote_file)
            end
          end
        end

        exit 0
      end

      raise ArgumentError, "Target is a directory, but input is not a local file -- cannot proceed" if s3_object =~ /\/$/
      Cliaws.s3.put(source, s3_object)

    rescue Cliaws::S3::UnknownBucket
      abort "Could not find bucket named #{$!.bucket_name}"
    end
  end

  mode("rm") do
    mixin :s3_object

    def run
      Cliaws.s3.rm(params["s3_object"].value)

    rescue Cliaws::S3::UnknownBucket
      abort "Could not find bucket named #{$!.bucket_name}"
    end
  end

  mode("cat") do
    mixin :s3_object

    def run
      Cliaws.s3.get(params["s3_object"].value, STDOUT)
      puts

    rescue Cliaws::S3::UnknownBucket
      abort "Could not find bucket named #{$!.bucket_name}"
    end
  end

  mode("get") do
    mixin :s3_object

    argument("local_file") do
      argument_required
      optional
    end

    def run
      if params["local_file"].given? then
        dest = File.open(params["local_file"].value, "wb")
      else
        dest = STDOUT
      end

      Cliaws.s3.get(params["s3_object"].value, dest)

    rescue Cliaws::S3::UnknownBucket
      abort "Could not find bucket named #{$!.bucket_name}"
    end
  end

  mode("head") do
    mixin :s3_object

    def run
      Cliaws.s3.head(params["s3_object"].value)

    rescue Cliaws::S3::UnknownBucket
      abort "Could not find bucket named #{$!.bucket_name}"
    end
  end

  def run
    abort "Required action argument missing.  Run '#{$0} help' for details."
  end
}
